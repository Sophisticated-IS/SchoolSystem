@page "/packetLoad"
@using System.Globalization
@using CsvHelper
@using CsvHelper.Configuration
@using Microsoft.EntityFrameworkCore.Scaffolding
@using Неверов_АнализУязвимостей_ПО.DataBase
@using Неверов_АнализУязвимостей_ПО.DataBase.Schema
@using Неверов_АнализУязвимостей_ПО.Models.DTO
@inject DataBaseContext DBContext


<PageTitle>Пакетная загрузка</PageTitle>

<h1>Выберите что будете загружать</h1>

<div>
    <select @bind="_selectedOption">
        <option value="@PacketLoadTypes.Classes">Классы</option>
        <option value="@PacketLoadTypes.Pupils">Ученики</option>
    </select>
</div>

<h1>Выберите файл для загрузки</h1>

<div >
    <div class="col">
        <InputFile OnChange="@LoadFile"/>
    </div>
</div>

@if (_selectedOption == PacketLoadTypes.Classes)
{
    <div class="container-fluid">

        <div class="row">
            <div class="col">
                <h2> Классы </h2>
                <table class="table table-striped">
                    <thead class="table-dark">
                    <tr>
                        <th scope="col">
                            Учебный год
                        </th>
                        <th scope="col">
                            ID Паралели
                        </th>
                        <th scope="col">
                            Параллель
                        </th>
                        <th scope="col">
                            ID Учителя
                        </th>
                        <th scope="col">
                            ФИО Учителя
                        </th>
                        <th scope="col">
                            Комментарий учителя
                        </th>

                    </tr>
                    </thead>

                    @foreach (var cls in _classDtoList)
                    {
                        <tbody>
                        <tr>
                            <td>
                                @_schoolYear!.SchoolYear
                            </td>
                            <td>
                                <select class="form-select" @bind="cls.ParallelId">
                                    @foreach (var p in _parallels)
                                    {
                                        <option value="@p.Id">@p.Id </option>
                                    }
                                </select>
                            </td>
                            <td>
                                @cls.Parallel
                            </td>
                            <td>
                                <select class="form-select" @bind="cls.TeacherId">
                                    @foreach (var t in _teachers)
                                    {
                                        <option value="@t.Id">@t.Id </option>
                                    }
                                </select>
                            </td>
                            <td>
                                @cls.TeacherFIO
                            </td>
                            <td>
                                @cls.TeacherComment
                            </td>

                        </tr>
                        </tbody>
                    }

                    <tbody>

                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div id="container">
        <div id="leftThing">
            <button class="btn btn-danger" @onclick="ClearClasses">
                Очистить все записи
            </button>
        </div>

        <div id="content"/>

        <div id="rightThing" align="right">
            <button class="btn btn-success" @onclick="AddClasses">
                Добавить все загруженные классы из файла
            </button>
        </div>
    </div>
}

@if (_selectedOption == PacketLoadTypes.Pupils)
{
    <div class="container-fluid">

        <div class="row">
            <div class="col">
                <h2> Ученики </h2>
                <table class="table table-striped">
                    <thead class="table-dark">
                    <tr>
                        <th scope="col">
                            Id Ученика
                        </th>
                        <th scope="col">
                            ФИО Ученика
                        </th>
                        <th scope="col">
                            ID класса
                        </th>

                    </tr>
                    </thead>

                    @foreach (var ppl in _pupilDtoList)
                    {
                        <tbody>
                        <tr>
                            <td>
                                <select class="form-select" @bind="ppl.Id">
                                    @foreach (var p in _pupils)
                                    {
                                        <option value="@p.Id">@p.Id </option>
                                    }
                                </select>
                            </td>
                            <td >
                                <input class="form-control" @bind="ppl.FIO"/>
                            </td>
                            <td>
                                <select class="form-select" @bind="ppl.ClassId">
                                    @foreach (var cls in _classes)
                                    {
                                        <option value="@cls.Id">@cls.Id </option>
                                    }
                                </select>
                            </td>
                        </tr>
                        </tbody>
                    }

                    <tbody>

                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div id="container">
        <div id="leftThing">
            <button class="btn btn-danger" @onclick="ClearPupils">
                Очистить все записи
            </button>
        </div>

        <div id="content"/>

        <div id="rightThing">
            <button class="btn btn-success" @onclick="AddPupils">
                Добавить всех загруженных учеников из файла
            </button>
        </div>
    </div>
}

@code
{
    PacketLoadTypes _selectedOption = PacketLoadTypes.Classes;
    private readonly List<ClassDto> _classDtoList = new List<ClassDto>();
    private readonly List<Неверов_АнализУязвимостей_ПО.DataBase.Schema.Classes> _classes = new();
    private readonly List<Неверов_АнализУязвимостей_ПО.DataBase.Schema.Pupils> _pupils = new();
    private readonly List<Неверов_АнализУязвимостей_ПО.DataBase.Schema.ClassParallels> _parallels = new();
    private readonly List<Неверов_АнализУязвимостей_ПО.DataBase.Schema.Teachers> _teachers = new();
    private readonly List<PupilDto> _pupilDtoList = new List<PupilDto>();
    SchoolYears? _schoolYear;

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        _schoolYear = DBContext.SchoolYears.OrderBy(k => k.SchoolYear).Last();

        _classes.Clear();
        _classes.AddRange(DBContext.Classes);

        _pupils.Clear();
        _pupils.AddRange(DBContext.Pupils.Where(p => !p.IsDeleted));

        _parallels.Clear();
        _parallels.AddRange(DBContext.ClassParallels);

        _teachers.Clear();
        _teachers.AddRange(DBContext.Teachers);

        var f = e.File;
        var csvConfiguration = new CsvConfiguration(CultureInfo.InvariantCulture)
        {
            Delimiter = ";",
            MissingFieldFound = (x) =>
            {
    /*nothing to do*/
            },
            HeaderValidated = (x) =>
            {
    /*nothing to do*/
            }
        };
        switch (_selectedOption)
        {
            case PacketLoadTypes.Classes:
                await ClassesHandler(f, csvConfiguration);
                break;
            case PacketLoadTypes.Pupils:
                await PupilsHandler(f, csvConfiguration);
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private async Task PupilsHandler(IBrowserFile f, CsvConfiguration csvConfiguration)
    {
        using var reader = new StreamReader(f.OpenReadStream());
        using var csv = new CsvReader(reader, csvConfiguration);
        var pupilsEnumerable = csv.GetRecordsAsync<PupilDto>();
        await foreach (var pupil in pupilsEnumerable)
        {
            _pupilDtoList.Add(pupil);
        }
    }

    private async Task ClassesHandler(IBrowserFile f, CsvConfiguration csvConfiguration)
    {
        _classDtoList.Clear();

        using var reader = new StreamReader(f.OpenReadStream());
        using var csv = new CsvReader(reader, csvConfiguration);
        var classesEnumerable = csv.GetRecordsAsync<ClassDto>();
        await foreach (var cls in classesEnumerable)
        {
            _classDtoList.Add(cls);
        }
    }


    //Добавление загруденных Учеников из файла
    private async Task AddPupils()
    {
        foreach (var pupilDto in _pupilDtoList.ToArray())
        {
    //если класса такого нет то выходим
            if (!DBContext.Classes.Where(c => c.Id == pupilDto.ClassId).Any()) continue;

    //если просто происходит добавление ученика
            if (pupilDto.Id == 0)
            {
                DBContext.Pupils.Add(new DataBase.Schema.Pupils()
                {
                    FIO = pupilDto.FIO, ClassId = pupilDto.ClassId
                });
            }
            else //происходит перевод ученика
            {
                var pupilsEnumerable = DBContext.Pupils.Where(p => p.Id == pupilDto.Id);
                if (pupilsEnumerable.Any())
                {
                    var pupil = pupilsEnumerable.First();
                    pupil.IsDeleted = true;
                    DBContext.Pupils.Add(new DataBase.Schema.Pupils
                    {
                        FIO = pupilDto.FIO, ClassId = pupilDto.ClassId
                    });
                }
            }

            await DBContext.SaveChangesAsync().ConfigureAwait(false);
            _pupilDtoList.Remove(pupilDto);
        }
    }

    //Добавление загруженных Классов из файла
    private async Task AddClasses()
    {
        foreach (var classDto in _classDtoList.ToArray())
        {
            if (DBContext.ClassParallels.Where(p => p.Id == classDto.ParallelId).Any() &&
                DBContext.Teachers.Where(t => t.Id == classDto.TeacherId).Any())
            {
                DBContext.Classes.Add(new DataBase.Schema.Classes
                {
                    SchoolYearId = _schoolYear!.Id,
                    ClassParallelsId = classDto.ParallelId,
                    TeacherId = classDto.TeacherId
                });
                await DBContext.SaveChangesAsync().ConfigureAwait(false);
                _classDtoList.Remove(classDto);
            }
        }
    }

    private void ClearClasses()
    {
        _classDtoList.Clear();
    }

    private void ClearPupils()
    {
        _pupilDtoList.Clear();
    }
}